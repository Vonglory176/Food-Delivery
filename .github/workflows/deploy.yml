name: Deploy

on:
  push:
    branches:
      - deployment-tests

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies for frontend
        working-directory: frontend
        run: npm install

      - name: Build frontend project
        working-directory: frontend
        run: npm run build

      - name: Install dependencies for admin
        working-directory: admin
        run: npm install

      - name: Build admin project
        working-directory: admin
        run: npm run build

      - name: Move dist contents to parent directories
        run: |
          mv frontend/dist/* frontend/
          mv admin/dist/* admin/
          rm -rf frontend/dist
          rm -rf admin/dist

      - name: Prepare directories for deployment # Create directories for deployment
        run: |
          mkdir -p ./dist/frontend
          mkdir -p ./dist/admin
          cp -R frontend/dist/* ./dist/frontend/
          cp -R admin/dist/* ./dist/admin/
          touch ./dist/frontend/.nojekyll
          touch ./dist/admin/.nojekyll

      - name: Upload production-ready build files
        uses: actions/upload-artifact@v4
        with:
          name: production-files
          path: ./dist # gh-pages/
        #   path: |
        #     frontend/dist
        #     admin/dist

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deployment-tests'

    steps:
      - name: Create directory
        run: mkdir -p ./dist # gh-pages

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: production-files
          path: ./dist # gh-pages/

      - name: Prepare directories for deployment
        run: |
          mkdir -p gh-pages/frontend
          if [ -d ./dist/frontend ] && [ "$(ls -A ./dist/frontend)" ]; then
            cp -R ./dist/frontend/* gh-pages/frontend/
          else
            echo "Warning: ./dist/frontend is empty or does not exist"
          fi
          mkdir -p gh-pages/admin
          if [ -d ./dist/admin ] && [ "$(ls -A ./dist/admin)" ]; then
            cp -R ./dist/admin/* gh-pages/admin/
          else
            echo "Warning: ./dist/admin is empty or does not exist"
        #   fi
        #   touch gh-pages/frontend/.nojekyll
        #   touch gh-pages/admin/.nojekyll
        

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages
          
    # steps:
    #   - name: Download artifact
    #     uses: actions/download-artifact@v4
    #     with:
    #       name: production-files
    #       path: ./dist

    #   - name: List downloaded artifacts # Debugging step
    #     run: ls -R ./dist

    # #   - name: Clean up gh-pages branch
    # #     run: |
    # #       git config --global user.name "github-actions"
    # #       git config --global user.email "github-actions@github.com"
    # #       git clone --depth=1 --branch=gh-pages https://github.com/${{ github.repository }} gh-pages
    # #       rm -rf gh-pages/*

    #   - name: Deploy frontend to GitHub Pages
    #     uses: peaceiris/actions-gh-pages@v3
    #     with:
    #       github_token: ${{ secrets.GITHUB_TOKEN }}
    #       publish_dir: ./dist/frontend/dist

    #   - name: Deploy admin to GitHub Pages
    #     uses: peaceiris/actions-gh-pages@v3
    #     with:
    #       github_token: ${{ secrets.GITHUB_TOKEN }}
    #       publish_dir: ./dist/admin/dist

# ORIGINAL ----------------------------------------------

# name: Deploy

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v3

#       - name: Setup Node
#         uses: actions/setup-node@v3

#       - name: Install dependencies
#         uses: bahmutov/npm-install@v1

#       - name: Build project
#         run: npm run build

#       - name: Upload production-ready build files
#         uses: actions/upload-artifact@v4
#         with:
#           name: production-files
#           path: ./dist

#   deploy:
#     name: Deploy
#     needs: build
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: Download artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: production-files
#           path: ./dist

#       - name: Deploy to GitHub Pages
#         uses: peaceiris/actions-gh-pages@v3
#         with:
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           publish_dir: ./dist